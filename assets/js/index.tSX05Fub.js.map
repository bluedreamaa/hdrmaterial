{"version":3,"file":"index.tSX05Fub.js","sources":["../../../src/09-material.js"],"sourcesContent":["import \"./style.css\";\r\nimport * as THREE from \"three\";\r\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls.js\";\r\nimport { RGBELoader } from \"three/examples/jsm/loaders/RGBELoader.js\";\r\nimport * as dat from \"dat.gui\";\r\n/**\r\n * debug\r\n */\r\n\r\nconst gui = new dat.GUI();\r\n/*\r\n *textures\r\n */\r\nconst textureLoader = new THREE.TextureLoader();\r\nconst cubeTextureLoader = new THREE.CubeTextureLoader();\r\nconst doorColorTexture = textureLoader.load(\"/textures/door/color.jpg\");\r\nconst doorAlphaTexture = textureLoader.load(\"/textures/door/alpha.jpg\");\r\nconst doorAmbientOcclusionTexture = textureLoader.load(\r\n  \"/textures/door/ambientOcclusion.jpg\"\r\n);\r\nconst doorHeightTexture = textureLoader.load(\r\n  \"/textures/door/height.jpg\"\r\n);\r\nconst doorNormalTexture = textureLoader.load(\r\n  \"/textures/door/normal.jpg\"\r\n);\r\nconst doorMetalnessTexture = textureLoader.load(\r\n  \"/textures/door/metalness.jpg\"\r\n);\r\nconst doorRoughnessTexture = textureLoader.load(\r\n  \"/textures/door/roughness.jpg\"\r\n);\r\nconst matcapTexture = textureLoader.load(\"/textures/matcaps/8.png\");\r\nconst gradientTexture = textureLoader.load(\"/textures/gradients/5.jpg\");\r\n// gradientTexture.minFilter = THREE.NearestFilter;\r\n// gradientTexture.magFilter = THREE.NearestFilter;\r\n// gradientTexture.generateMipmaps = false;\r\n// const environmentMapTexture = cubeTextureLoader.load([\r\n//   \"/static/textures/environmentMap/Bridge2/posx.jpg\",\r\n//   \"/static/textures/environmentMap/Bridge2/negx.jpg\",\r\n//   \"/static/textures/environmentMap/Bridge2/posy.jpg\",\r\n//   \"/static/textures/environmentMap/Bridge2/negy.jpg\",\r\n//   \"/static/textures/environmentMap/Bridge2/posz.jpg\",\r\n//   \"/static/textures/environmentMap/Bridge2/negz.jpg\",\r\n// ]);\r\n\r\n/**\r\n * Environment map\r\n */\r\nconst rgbeLoader = new RGBELoader()\r\nrgbeLoader.load('textures/environmentMap/conference.hdr', (environmentMap) =>\r\n{\r\n    environmentMap.mapping = THREE.EquirectangularReflectionMapping\r\n\r\n    scene.background = environmentMap\r\n    scene.environment = environmentMap\r\n})\r\n//canvas\r\nconst canvas = document.querySelector(\"canvas.webgl\");\r\n\r\nconst scene = new THREE.Scene();\r\n//object\r\n// const material = new THREE.MeshBasicMaterial({\r\n// color: 0xff0000,\r\n// map:doorColorTexture\r\n// wireframe: true,\r\n// });\r\n// material.color.set('#ff00ff')\r\n// material.color=new THREE.Color('yellow')\r\n// material.color=new THREE.Color(0x00ffa00)\r\n// material.wireframe=true\r\n// material.opacity=0.5\r\n// material.transparent=true\r\n// material.map=doorColorTexture\r\n// material.alphaMap=doorAlphaTexture\r\n// material.side=THREE.FrontSide\r\n\r\n/*MeshNormalMaterial*/\r\n// const material=new THREE.MeshNormalMaterial()\r\n// material.wireframe=true\r\n// material.flatShading=true\r\n/*meshcapmaterial*/\r\n// const material=new THREE.MeshMatcapMaterial()\r\n// material.matcap=matcapTexture\r\n\r\n/*MeshDepthMaterial*/\r\n// const material=new THREE.MeshDepthMaterial()\r\n\r\n// const material = new THREE.MeshLambertMaterial();\r\n// const material = new THREE.MeshPhongMaterial();\r\n// material.shininess = 1000;\r\n// material.specular=new THREE.Color(0xff0000)\r\n// material.side = THREE.DoubleSide;\r\n// const material = new THREE.MeshToonMaterial();\r\n// material.gradientMap = gradientTexture;\r\n\r\n// const material = new THREE.MeshStandardMaterial();\r\n// material.metalness = 0;\r\n// material.roughness = 1;\r\n// material.map = doorColorTexture;\r\n// material.aoMap = doorAmbientOcclusionTexture;\r\n// material.aoMapIntensity = 1;\r\n// material.displacementMap = doorHeightTexture;\r\n// material.displacementScale = 0.05;\r\n// material.metalnessMap = doorRoughnessTexture;\r\n// material.normalMap = doorNormalTexture;\r\n// material.normalScale.set(0.5, 0.5);\r\n// material.transparent = true;\r\n// material.alphaMap = doorAlphaTexture;\r\nconst material = new THREE.MeshStandardMaterial();\r\nmaterial.side=THREE.DoubleSide\r\nmaterial.metalness = 0.7;\r\nmaterial.roughness = 0.2;\r\n// material.envMap = environmentMapTexture;\r\ngui.add(material, \"metalness\").min(0).max(1).step(0.001);\r\ngui.add(material, \"roughness\").min(0).max(1).step(0.001);\r\n// gui.add(material, \"aoMapIntensity\").min(0).max(10).step(0.0001);\r\n// gui.add(material, \"displacementScale\").min(0).max(1).step(0.0001);\r\nconst sphere = new THREE.Mesh(new THREE.SphereGeometry(0.5, 64, 64), material);\r\nsphere.position.x = -1.5;\r\nsphere.geometry.setAttribute(\r\n  \"uv2\",\r\n  new THREE.BufferAttribute(sphere.geometry.attributes.uv.array, 2)\r\n);\r\n\r\nconst plane = new THREE.Mesh(new THREE.PlaneGeometry(1, 1, 100, 100), material);\r\n// console.log(plane.geometry.attributes.uv)\r\nplane.geometry.setAttribute(\r\n  \"uv2\",\r\n  new THREE.BufferAttribute(plane.geometry.attributes.uv.array)\r\n);\r\n\r\nconst torus = new THREE.Mesh(\r\n  new THREE.TorusGeometry(0.3, 0.2, 64, 128),\r\n  material\r\n);\r\ntorus.position.x = 1.5;\r\n\r\nscene.add(sphere, plane, torus);\r\n\r\n/**\r\n * lights\r\n */\r\n\r\nconst ambientLight = new THREE.AmbientLight(0xffffff, 1);\r\nscene.add(ambientLight);\r\n\r\nconst pointLight = new THREE.PointLight(0xffffff, 30);\r\npointLight.position.x = 2;\r\npointLight.position.y = 3;\r\npointLight.position.z = 4;\r\nscene.add(pointLight);\r\n\r\n//size\r\nconst sizes = {\r\n  width: window.innerWidth,\r\n  height: window.innerHeight,\r\n};\r\n\r\n//resize\r\nwindow.addEventListener(\"resize\", () => {\r\n  sizes.width = window.innerWidth;\r\n  sizes.height = window.innerHeight;\r\n  //update camera\r\n  camera.aspect = sizes.width / sizes.height;\r\n  camera.updateProjectionMatrix();\r\n  renderer.setSize(sizes.width, sizes.height);\r\n  renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\r\n});\r\n\r\n//camera\r\nconst camera = new THREE.PerspectiveCamera(\r\n  75,\r\n  sizes.width / sizes.height,\r\n  0.1,\r\n  200\r\n);\r\ncamera.position.x = 1;\r\ncamera.position.y = 1;\r\ncamera.position.z = 2;\r\ncamera.lookAt(new THREE.Vector3(0, 0, 0));\r\nscene.add(camera);\r\n\r\n//controls\r\nconst controls = new OrbitControls(camera, canvas);\r\n// controls.enabled = false;\r\ncontrols.enableDamping = true;\r\n\r\n//renderer\r\nconst renderer = new THREE.WebGLRenderer({ canvas: canvas, antialias: true });\r\nrenderer.setSize(sizes.width, sizes.height);\r\nrenderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\r\n// renderer.render(scene, camera);\r\n\r\nconst clock = new THREE.Clock();\r\n//animations\r\nconst tick = () => {\r\n  const elapsedTime = clock.getElapsedTime();\r\n  //update objects\r\n  sphere.rotation.y = 0.1 * elapsedTime;\r\n  plane.rotation.y = 0.1 * elapsedTime;\r\n  torus.rotation.y = 0.1 * elapsedTime;\r\n\r\n  sphere.rotation.x = 0.1 * elapsedTime;\r\n  plane.rotation.x = 0.1 * elapsedTime;\r\n  torus.rotation.x = 0.1 * elapsedTime;\r\n  controls.update();\r\n  renderer.render(scene, camera);\r\n  window.requestAnimationFrame(tick);\r\n};\r\n\r\ntick();\r\n"],"names":["gui","dat.GUI","textureLoader","THREE.TextureLoader","THREE.CubeTextureLoader","rgbeLoader","RGBELoader","environmentMap","THREE.EquirectangularReflectionMapping","scene","canvas","THREE.Scene","material","THREE.MeshStandardMaterial","THREE.DoubleSide","sphere","THREE.Mesh","THREE.SphereGeometry","THREE.BufferAttribute","plane","THREE.PlaneGeometry","torus","THREE.TorusGeometry","ambientLight","THREE.AmbientLight","pointLight","THREE.PointLight","sizes","camera","renderer","THREE.PerspectiveCamera","THREE.Vector3","controls","OrbitControls","THREE.WebGLRenderer","clock","THREE.Clock","tick","elapsedTime"],"mappings":"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"}